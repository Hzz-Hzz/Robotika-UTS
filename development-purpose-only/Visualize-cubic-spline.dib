#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!csharp

#r "nuget:Microsoft.Data.Analysis"
#r "nuget: XPlot.Plotly"
#r "nuget: XPlot.Plotly.Interactive"
#r "nuget: Plotly.NET.CSharp"
#r "nuget: MathNet.Numerics, 5.0.0"

#!csharp

using XPlot.Plotly;
using Microsoft.Data.Analysis;
using System.Numerics;
using MathNet.Numerics.Interpolation;

#!csharp

    // private static readonly double[] y_actual_source = {0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0};
    private static readonly double[] x_ratio_based_on_y_source =   {464.0, 133.0, 71.0, 50.0, 37.0, 29.0, 26.0, 22.0};  // for every 0.25 of actual X

    private CubicSpline y_ratio_to_x_pixel_to_quarter_ratio =
        CubicSpline.InterpolatePchipSorted(y_pixel, x_ratio_based_on_y_source);


    private static readonly double[] y_pixel = {0.0, 350.0, 413.0, 437.0, 449.0, 457.0, 462.0, 466.0};
    private static readonly double[] y_actual =   {0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0};
    private static readonly double max_y_pixel = max_y_pixel = y_pixel.Max();
    private CubicSpline y_pixel_to_y_actual =
        CubicSpline.InterpolatePchipSorted(y_pixel, y_actual);



    public double yPixelToYActual(double y_pixel) {
        // if (y_pixel < 0)
            // throw new ValidationException();
        if (y_pixel > max_y_pixel) {  // in case of we need to do "extrapolation", do linear estimation
            var value2 = max_y_pixel;
            var value1 = max_y_pixel * 9.8/10;
            var result2 = yPixelToYActual(value2);
            var result1 = yPixelToYActual(value1);
            var gradient = (result2 - result1) / (value2 - value1);

            var additional = gradient * (y_pixel - value2);    // x2 must be greater than x1 in this case
            return result2 + additional;
        }

        return y_pixel_to_y_actual.Interpolate(y_pixel);
    }

    public double xPixelToXActual(double x_pixel, double y_pixel) {
        // if (x_pixel < 0 || y_pixel < 0)
            // throw new ValidationException();
        if (y_pixel > max_y_pixel) {  // in case of we need to do "extrapolation", do linear estimation
            var value2 = max_y_pixel;
            var value1 = max_y_pixel * 9.8/10;
            var result2 = xPixelToXActual(x_pixel, value2);
            var result1 = xPixelToXActual(x_pixel, value1);
            var gradient = (result2 - result1) / (value2 - value1);

            var additional = gradient * (y_pixel - value2);    // x2 must be greater than x1 in this case
            return result2 + additional;
        }

        double xRatioPerQuarter = y_ratio_to_x_pixel_to_quarter_ratio.Interpolate(
            Math.Min(max_y_pixel, y_pixel));
        return x_pixel * 0.25 / xRatioPerQuarter;
    }

#!csharp

// var scatter_data = new List<Tuple<double, double>>();
var x_dot = new List<double>();
var y_dot = new List<double>();


for (var i = 0.0; i < 566.0; i += 1){
    x_dot.Add(i);
    y_dot.Add(xPixelToXActual(300, i));
}


var chart = Chart.Plot(new Scatter(){
    x= x_dot, 
    y= y_dot,
    mode = "markers"
});
chart.Width = 600;
chart.Height = 600;

// dont add semi colon
chart

#!csharp

// var scatter_data = new List<Tuple<double, double>>();
var x_dot = new List<double>();
var y_dot = new List<double>();


for (var i = 400.0; i < 480.0; i += 0.10){
    x_dot.Add(i);
    y_dot.Add(yPixelToYActual(i));
}


var chart = Chart.Plot(new Scatter(){
    x= x_dot, 
    y= y_dot,
    mode = "markers"

});
chart.Width = 600;
chart.Height = 600;

// dont add semi colon
chart
